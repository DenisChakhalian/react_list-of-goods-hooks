{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","isReversedOrSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","isReversedPrev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,oBAAAA,E,iBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAoBH,EAAUI,SAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAwBF,GAAcF,EAEtCK,EAjCR,SACEC,EACAN,EACAE,GAEA,IAAMK,EAAa,YAAOD,GAmB1B,OAjBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAAUgB,SACb,OAAOF,EAAMG,cAAcF,GAC7B,KAAKf,EAAUkB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXZ,GACFK,EAAcQ,UAGTR,EAScS,CAAiBpB,EAAiBI,EAAWE,GAOlE,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcL,EAAUgB,WAEtCS,QAAS,kBAAMnB,EAAaN,EAAUgB,WALxC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAcL,EAAUkB,SAEtCO,QAAS,kBAAMnB,EAAaN,EAAUkB,SALxC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAA2B,IAAfjB,IAEdkB,QAAS,kBAAMjB,GAAc,SAAAkB,GAAc,OAAKA,MALlD,uBAUGjB,GACD,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA1CiB,WACzBnB,EAAaN,EAAUI,SACvBI,GAAc,IAqCR,sBAUJ,6BACGE,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC5GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.82deda25.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Default = '',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortField,\n  isReversed: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n        case SortField.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const isReversedOrSortField = isReversed || sortField;\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  const onClickResetHandle = () => {\n    setSortField(SortField.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortField.Alphabet,\n          })}\n          onClick={() => setSortField(SortField.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortField.Length,\n          })}\n          onClick={() => setSortField(SortField.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': isReversed !== true,\n          })}\n          onClick={() => setIsReversed(isReversedPrev => !isReversedPrev)}\n        >\n          Reverse\n        </button>\n\n        {!!isReversedOrSortField && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onClickResetHandle}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}